- name: Check if swap is mounted
  shell: grep '{{ swap_file_path }}' /proc/swaps
  ignore_errors: yes
  register: swap_file_exists

- name: Allocate swap space in file
  shell: fallocate -l "{{ swap_file_size }}" "{{ swap_file_path }}"
  when: swap_file_exists.rc == 1

- name: chmod swap file
  file:
    path: "{{ swap_file_path }}"
    mode: 0600

- name: Create swap space
  shell: mkswap "{{ swap_file_path }}"
  when: swap_file_exists.rc == 1

- name: Swap on
  shell: swapon "{{ swap_file_path }}"
  when: swap_file_exists.rc == 1

- name: Keep swap mount path persistent in fstab
  mount:
    name: swap
    src: "{{ swap_file_path }}"
    fstype: swap
    opts: defaults
    passno: '0'
    dump: '0'
    state: present
  when: swap_file_exists == 1

- name: Import apt keys
  apt_key:
    url: "{{ item }}"
    state: present
  loop:
    - https://packages.cloud.google.com/apt/doc/apt-key.gpg
    - https://packagecloud.io/datawireio/telepresence/gpgkey

- name: Add apt repositories
  apt_repository:
    repo: "{{ item.kind}} {{ item.uri }} {{ item.suite }} {{ item.release }}"
    state: present
  loop:
    - { kind: deb, uri: "http://packages.cloud.google.com/apt", suite: "cloud-sdk-{{ ubuntu_lts_release }}", release: main }
    - { kind: deb, uri: "https://apt.kubernetes.io/", suite: "kubernetes-xenial", release: main }
    - { kind: deb, uri: "https://packagecloud.io/datawireio/telepresence/ubuntu/", suite: "xenial", release: main }

- name: Upgrade all apt packages
  apt:
    upgrade: dist
    update_cache: yes

- name: Install apt packages
  apt:
    name:
      - unzip
      - ntp
      - tree
      - zsh
      - jq
      - htop
      - sysstat
      - fzf
      - peco
      - direnv
      - fswatch
      - ripgrep
      - httpie
      - source-highlight
      - docker.io
      - docker-compose
      - neovim
      - golang
      - nodejs
      - npm
      - ruby
      - bundler
      - sqlite3
      - protobuf-compiler
      - libprotobuf-dev
      - mariadb-client
      - postgresql-client-11
      - google-cloud-sdk
      - kubectl
      - telepresence
      - packer
      - python3-setuptools
      - python3-pip
      - python3-dev
    state: present
    install_recommends: no
  ignore_errors: yes

- name: Download additional tools
  get_url:
    url: "{{ item.url }}"
    dest: "{{ item.dest }}"
    owner: root
    mode: "{{ item.mode }}"
  loop:
    - { url: "{{ terraform_download_url }}", dest: "/tmp", mode: "0644" }
    - { url: "{{ kubesec_download_url }}", dest: "/tmp", mode: "0644" }
    - { url: "{{ stern_download_url }}", dest: "/usr/local/bin/stern", mode: "0755" }
    - { url: "{{ kubectx_download_url }}", dest: "/usr/local/bin/kubectx", mode: "0755" }
    - { url: "{{ kubens_download_url }}", dest: "/usr/local/bin/kubens", mode: "0755" }
    - { url: "{{ helm_download_url }}", dest: "/tmp", mode: "0644" }
    - { url: "{{ ekscli_download_url }}", dest: "/tmp", mode: "0644" }
    - { url: "{{ ecscli_download_url }}", dest: "/usr/local/bin/ecs-cli", mode: "0755" }
    - { url: "{{ circleci_download_url }}", dest: "/tmp", mode: "0644" }
    - { url: "{{ heroku_download_url }}", dest: "/tmp", mode: "0644" }
  register: downloaded

- name: Unarchive additional tools
  unarchive:
    src: "{{ item.dest }}"
    dest: /usr/local/bin
    owner: root
    mode: 0755
  when: item.dest is regex("(\.gz$|\.zip$)")
  loop: "{{ downloaded.results }}"

- name: Add ssh user to docker group, then chsh to zsh
  user:
    name: "{{ ansible_ssh_user }}"
    shell: /bin/zsh
    groups: docker
    append: yes

- name: Systemctl enable & start ntpd
  systemd:
    name: ntp
    state: started
    enabled: yes
